import{_ as o,c as t,a0 as a,o as r}from"./chunks/framework.BeF2i_lt.js";const u=JSON.parse('{"title":"Módulo de Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"api/modules/hooks.md","filePath":"api/modules/hooks.md"}'),s={name:"api/modules/hooks.md"};function n(d,e,i,c,l,h){return r(),t("div",null,e[0]||(e[0]=[a('<h1 id="modulo-de-hooks" tabindex="-1">Módulo de Hooks <a class="header-anchor" href="#modulo-de-hooks" aria-label="Permalink to &quot;Módulo de Hooks&quot;">​</a></h1><p>O módulo de hooks é responsável por gerenciar eventos do Editor.</p><p>Para utilizar o módulo de hooks, basta importar o módulo <code>lenz:hooks</code> no arquivo de script de sua extensão.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { onAfter } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:hooks&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="metodos" tabindex="-1">Métodos <a class="header-anchor" href="#metodos" aria-label="Permalink to &quot;Métodos&quot;">​</a></h2><h3 id="onbefore-event-string-callback-function-lenzdisposer" tabindex="-1"><code>onBefore(event: string, callback: Function): LenzDisposer</code> <a class="header-anchor" href="#onbefore-event-string-callback-function-lenzdisposer" aria-label="Permalink to &quot;`onBefore(event: string, callback: Function): LenzDisposer`&quot;">​</a></h3><p>Adiciona um hook para ser executado antes de um evento.</p><h4 id="parametros" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>event</td><td><code>string</code></td><td>Nome do evento.</td></tr><tr><td>callback</td><td><code>Function</code></td><td>Função a ser executada.</td></tr></tbody></table><h4 id="retorno" tabindex="-1">Retorno <a class="header-anchor" href="#retorno" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>LenzDisposer</code> - Disposer para remover o hook que deve ser adicionado em <code>context.subscriptions</code> da extensão.</p><h3 id="onafter-event-string-callback-function-lenzdisposer" tabindex="-1"><code>onAfter(event: string, callback: Function): LenzDisposer</code> <a class="header-anchor" href="#onafter-event-string-callback-function-lenzdisposer" aria-label="Permalink to &quot;`onAfter(event: string, callback: Function): LenzDisposer`&quot;">​</a></h3><p>Adiciona um hook para ser executado após um evento.</p><h4 id="parametros-1" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-1" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>event</td><td><code>string</code></td><td>Nome do evento.</td></tr><tr><td>callback</td><td><code>Function</code></td><td>Função a ser executada.</td></tr></tbody></table><h4 id="retorno-1" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-1" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>LenzDisposer</code> - Disposer para remover o hook que deve ser adicionado em <code>context.subscriptions</code> da extensão.</p>',17)]))}const k=o(s,[["render",n]]);export{u as __pageData,k as default};
