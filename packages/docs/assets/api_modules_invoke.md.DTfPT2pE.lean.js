import{_ as i,c as a,a0 as t,o as e}from"./chunks/framework.BeF2i_lt.js";const c=JSON.parse('{"title":"Módulo Invoke","description":"","frontmatter":{},"headers":[],"relativePath":"api/modules/invoke.md","filePath":"api/modules/invoke.md"}'),n={name:"api/modules/invoke.md"};function o(l,s,d,r,h,p){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="modulo-invoke" tabindex="-1">Módulo Invoke <a class="header-anchor" href="#modulo-invoke" aria-label="Permalink to &quot;Módulo Invoke&quot;">​</a></h1><p>O módulo invoke é responsável por executar operações no agente de execução.</p><p>Para utilizar o módulo invoke, basta importar o módulo <code>lenz:invoke</code> no arquivo de script de sua extensão.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { invoke } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="metodos" tabindex="-1">Métodos <a class="header-anchor" href="#metodos" aria-label="Permalink to &quot;Métodos&quot;">​</a></h2><h3 id="invoke-t-command-string-args-record-string-unknown-promise-t" tabindex="-1"><code>invoke&lt;T&gt;(command: string, args: Record&lt;string, unknown&gt; = {}): Promise&lt;T&gt;</code> <a class="header-anchor" href="#invoke-t-command-string-args-record-string-unknown-promise-t" aria-label="Permalink to &quot;\`invoke&lt;T&gt;(command: string, args: Record&lt;string, unknown&gt; = {}): Promise&lt;T&gt;\`&quot;">​</a></h3><p>Invoca um comando no agente de execução de forma assíncrona.</p><p>Exemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { invoke } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.readFile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { filepath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/etc/hosts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;conteúdo do arquivo:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="parametros" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>command</td><td><code>string</code></td><td>Comando a ser invocado.</td></tr><tr><td>args</td><td><code>Record&lt;string, unknown&gt;</code></td><td>Argumentos do comando.</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">INFO</p><p>O argumento <code>args</code> será convertido em um <code>FormData</code> antes de ser enviado para o agente de execução. Portanto, os valores devem ser valores primitivos, <code>Blob</code>, <code>File</code> ou <code>FileList</code>.</p><p>Para enviar JSON, utilize <code>JSON.stringify</code>.</p></div><h3 id="exemplo" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h3><h4 id="retorno" tabindex="-1">Retorno <a class="header-anchor" href="#retorno" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>Promise&lt;T&gt;</code> - Promessa que será resolvida com o resultado da execução do comando.</p><h3 id="invokesync-t-command-string-args-record-string-unknown-t" tabindex="-1"><code>invokeSync&lt;T&gt;(command: string, args: Record&lt;string, unknown&gt; = {}): T</code> <a class="header-anchor" href="#invokesync-t-command-string-args-record-string-unknown-t" aria-label="Permalink to &quot;\`invokeSync&lt;T&gt;(command: string, args: Record&lt;string, unknown&gt; = {}): T\`&quot;">​</a></h3><p>Versão síncrona do método <code>invoke</code>.</p><p>Exemplo:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { invokeSync } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invokeSync</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.readFile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { filepath: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/etc/hosts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;conteúdo do arquivo:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Utilize este método com cautela, pois ele bloqueia a thread principal. Caso o comando seja muito demorado, pode causar travamentos no editor. Neste caso, utilize o método <code>invoke</code>.</p></div><h4 id="parametros-1" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-1" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>command</td><td><code>string</code></td><td>Comando a ser invocado.</td></tr><tr><td>args</td><td><code>Record&lt;string, unknown&gt;</code></td><td>Argumentos do comando.</td></tr></tbody></table>`,22)]))}const g=i(n,[["render",o]]);export{c as __pageData,g as default};
