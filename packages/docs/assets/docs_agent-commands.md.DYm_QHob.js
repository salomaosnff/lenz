import{_ as s,c as t,a0 as i,o as e}from"./chunks/framework.BeF2i_lt.js";const p=JSON.parse('{"title":"Comandos do Agente","description":"","frontmatter":{},"headers":[],"relativePath":"docs/agent-commands.md","filePath":"docs/agent-commands.md"}'),n={name:"docs/agent-commands.md"};function o(r,a,d,l,h,c){return e(),t("div",null,a[0]||(a[0]=[i(`<h1 id="comandos-do-agente" tabindex="-1">Comandos do Agente <a class="header-anchor" href="#comandos-do-agente" aria-label="Permalink to &quot;Comandos do Agente&quot;">​</a></h1><p>Comandos do agente podem ser criados utilizando bibliotecas dinâmicas em Rust. Eles são executados no servidor e podem ser chamados através do métofo <code>invoke()</code> ou <code>invokeSync()</code> d módulo <code>lenz:invoke</code> no cliente.</p><h2 id="invoke-t-command-string-args-record-string-invokearg-promise-t" tabindex="-1"><code>invoke&lt;T&gt;(command: string, args: Record&lt;string, InvokeArg&gt;): Promise&lt;T&gt;</code> <a class="header-anchor" href="#invoke-t-command-string-args-record-string-invokearg-promise-t" aria-label="Permalink to &quot;\`invoke&lt;T&gt;(command: string, args: Record&lt;string, InvokeArg&gt;): Promise&lt;T&gt;\`&quot;">​</a></h2><p>Executa um comando do agente de forma assíncrona.</p><h3 id="parametros" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>command</td><td>string</td><td>Identificador do comando do agente a ser chamado</td></tr><tr><td>args</td><td>Record&lt;string, InvokeArg&gt;</td><td>Argumentos do comando</td></tr></tbody></table><h3 id="retorno" tabindex="-1">Retorno <a class="header-anchor" href="#retorno" aria-label="Permalink to &quot;Retorno&quot;">​</a></h3><p>Retorna uma promessa que resolve com o resultado do comando.</p><h2 id="invokesync-t-command-string-args-record-string-invokearg-t" tabindex="-1"><code>invokeSync&lt;T&gt;(command: string, args: Record&lt;string, InvokeArg&gt;): T</code> <a class="header-anchor" href="#invokesync-t-command-string-args-record-string-invokearg-t" aria-label="Permalink to &quot;\`invokeSync&lt;T&gt;(command: string, args: Record&lt;string, InvokeArg&gt;): T\`&quot;">​</a></h2><p>Executa um comando do agente de forma síncrona.</p><h3 id="parametros-1" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-1" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>command</td><td>string</td><td>Identificador do comando do agente a ser chamado</td></tr><tr><td>args</td><td>Record&lt;string, InvokeArg&gt;</td><td>Argumentos do comando</td></tr></tbody></table><h3 id="retorno-1" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-1" aria-label="Permalink to &quot;Retorno&quot;">​</a></h3><p>Retorna o resultado do comando.</p><h2 id="exemplo" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { invoke } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:invoke&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subscriptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs.readFile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/etc/hostname&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextDecoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Em breve esta documentação será atualizada com mais informações sobre como criar bibliotecas dinâmicas em Rust e para adicionar comandos do agente.</p></div>`,17)]))}const m=s(n,[["render",o]]);export{p as __pageData,m as default};
