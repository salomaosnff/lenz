import{_ as t,c as e,a0 as i,o as s}from"./chunks/framework.BeF2i_lt.js";const c=JSON.parse('{"title":"Módulo de Reatividade","description":"","frontmatter":{},"headers":[],"relativePath":"api/modules/reactivity.md","filePath":"api/modules/reactivity.md"}'),r={name:"api/modules/reactivity.md"};function o(n,a,d,l,h,p){return s(),e("div",null,a[0]||(a[0]=[i('<h1 id="modulo-de-reatividade" tabindex="-1">Módulo de Reatividade <a class="header-anchor" href="#modulo-de-reatividade" aria-label="Permalink to &quot;Módulo de Reatividade&quot;">​</a></h1><p>O módulo de reatividade fornece utilitários para reatividade entre janelas de UI e o editor.</p><p>Para utilizar o módulo de reatividade, basta importar o módulo <code>lenz:reactivity</code> no arquivo de script de sua extensão.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;lenz:reactivity&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="metodos" tabindex="-1">Métodos <a class="header-anchor" href="#metodos" aria-label="Permalink to &quot;Métodos&quot;">​</a></h2><h3 id="createchannelport-t-u-t-receiver-data-t-void-channelport-t-u" tabindex="-1"><code>createChannelPort&lt;T, U = T&gt;(receiver: (data: T) =&gt; void): ChannelPort&lt;T, U&gt;</code> <a class="header-anchor" href="#createchannelport-t-u-t-receiver-data-t-void-channelport-t-u" aria-label="Permalink to &quot;`createChannelPort&lt;T, U = T&gt;(receiver: (data: T) =&gt; void): ChannelPort&lt;T, U&gt;`&quot;">​</a></h3><p>Cria uma nova porta de canal.</p><h4 id="parametros" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>receiver</td><td><code>Function</code></td><td>Função para receber dados.</td></tr></tbody></table><h4 id="retorno" tabindex="-1">Retorno <a class="header-anchor" href="#retorno" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>ChannelPort&lt;T, U&gt;</code> - Porta de canal.</p><h3 id="createchannel-t-u-t-channel-t-u" tabindex="-1"><code>createChannel&lt;T, U = T&gt;(): Channel&lt;T, U&gt;</code> <a class="header-anchor" href="#createchannel-t-u-t-channel-t-u" aria-label="Permalink to &quot;`createChannel&lt;T, U = T&gt;(): Channel&lt;T, U&gt;`&quot;">​</a></h3><p>Cria um novo canal de comunicação.</p><h4 id="retorno-1" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-1" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p>Uma tupla com dois elementos:</p><table tabindex="0"><thead><tr><th>Índice</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>0</td><td><code>ChannelPort&lt;T, U&gt;</code></td><td>Porta de envio.</td></tr><tr><td>1</td><td><code>ChannelPort&lt;U, T&gt;</code></td><td>Porta de recebimento.</td></tr></tbody></table><h3 id="ref-t-initialvalue-t-ref-t" tabindex="-1"><code>ref&lt;T&gt;(initialValue: T): Ref&lt;T&gt;</code> <a class="header-anchor" href="#ref-t-initialvalue-t-ref-t" aria-label="Permalink to &quot;`ref&lt;T&gt;(initialValue: T): Ref&lt;T&gt;`&quot;">​</a></h3><p>Cria uma referência reativa.</p><h4 id="parametros-1" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-1" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>initialValue</td><td><code>T | undefined</code></td><td>Valor inicial.</td></tr></tbody></table><h4 id="retorno-2" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-2" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>Ref&lt;T&gt;</code> - Referência reativa com valor inicial. <code>Ref&lt;T | undefined&gt;</code> - Referência reativa com valor inicial <code>undefined</code>.</p><h3 id="createcustomref-t-factory-customreffactory-t-ref-t" tabindex="-1"><code>createCustomRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt;</code> <a class="header-anchor" href="#createcustomref-t-factory-customreffactory-t-ref-t" aria-label="Permalink to &quot;`createCustomRef&lt;T&gt;(factory: CustomRefFactory&lt;T&gt;): Ref&lt;T&gt;`&quot;">​</a></h3><p>Cria uma referência reativa personalizada.</p><h4 id="exemplo" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> customRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createCustomRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sender</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;null&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;value&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newValue));</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sender.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h4 id="parametros-2" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-2" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>factory</td><td><code>CustomRefFactory&lt;T&gt;</code></td><td>Fábrica de referência.</td></tr></tbody></table><h4 id="retorno-3" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-3" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>Ref&lt;T&gt;</code> - Referência reativa personalizada.</p><h2 id="tipos" tabindex="-1">Tipos <a class="header-anchor" href="#tipos" aria-label="Permalink to &quot;Tipos&quot;">​</a></h2><h3 id="ref-t" tabindex="-1"><code>Ref&lt;T&gt;</code> <a class="header-anchor" href="#ref-t" aria-label="Permalink to &quot;`Ref&lt;T&gt;`&quot;">​</a></h3><p>Extende: <code>ChannelPort&lt;T, T&gt;</code>.</p><p>Representa uma referência reativa.</p><h3 id="propriedades" tabindex="-1">Propriedades <a class="header-anchor" href="#propriedades" aria-label="Permalink to &quot;Propriedades&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td><code>value</code></td><td><code>T</code></td><td>Valor atual da referência.</td></tr><tr><td><code>closed</code></td><td><code>boolean</code></td><td>Indica se a referência foi fechada.</td></tr></tbody></table><h3 id="channelport-t-u" tabindex="-1"><code>ChannelPort&lt;T, U&gt;</code> <a class="header-anchor" href="#channelport-t-u" aria-label="Permalink to &quot;`ChannelPort&lt;T, U&gt;`&quot;">​</a></h3><p>Representa uma porta de canal.</p><h4 id="metodos-1" tabindex="-1">Métodos <a class="header-anchor" href="#metodos-1" aria-label="Permalink to &quot;Métodos&quot;">​</a></h4><h5 id="send-data-t-void" tabindex="-1"><code>send(data: T): void</code> <a class="header-anchor" href="#send-data-t-void" aria-label="Permalink to &quot;`send(data: T): void`&quot;">​</a></h5><p>Envia dados pela porta.</p><h4 id="parametros-3" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-3" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>data</td><td><code>T</code></td><td>Dados a serem enviados.</td></tr></tbody></table><h4 id="notify-data-u-void" tabindex="-1"><code>notify(data: U): void</code> <a class="header-anchor" href="#notify-data-u-void" aria-label="Permalink to &quot;`notify(data: U): void`&quot;">​</a></h4><p>Notifica a porta com dados.</p><h4 id="parametros-4" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-4" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>data</td><td><code>U</code></td><td>Dados a serem notificados.</td></tr></tbody></table><h4 id="addlistener-listener-data-u-void-lenzdisposer" tabindex="-1"><code>addListener(listener: (data: U) =&gt; void): LenzDisposer</code> <a class="header-anchor" href="#addlistener-listener-data-u-void-lenzdisposer" aria-label="Permalink to &quot;`addListener(listener: (data: U) =&gt; void): LenzDisposer`&quot;">​</a></h4><p>Adiciona um ouvinte para receber dados pela porta.</p><h4 id="parametros-5" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-5" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>listener</td><td><code>(data: U) =&gt; void</code></td><td>Função para receber dados.</td></tr></tbody></table><h4 id="retorno-4" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-4" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>LenzDisposer</code> - Disposer para remover o ouvinte.</p><h4 id="next-signal-abortsignal-promise-u" tabindex="-1"><code>next(signal?: AbortSignal): Promise&lt;U&gt;</code> <a class="header-anchor" href="#next-signal-abortsignal-promise-u" aria-label="Permalink to &quot;`next(signal?: AbortSignal): Promise&lt;U&gt;`&quot;">​</a></h4><p>Aguarda o próximo dado recebido pela porta.</p><h4 id="parametros-6" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-6" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>signal</td><td><code>AbortSignal | undefined</code></td><td>Sinal de cancelamento.</td></tr></tbody></table><h4 id="retorno-5" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-5" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>Promise&lt;U&gt;</code> - Próximo dado recebido pela porta.</p><h4 id="waitclose-promise-void" tabindex="-1"><code>waitClose(): Promise&lt;void&gt;</code> <a class="header-anchor" href="#waitclose-promise-void" aria-label="Permalink to &quot;`waitClose(): Promise&lt;void&gt;`&quot;">​</a></h4><p>Aguarda o fechamento da porta.</p><h4 id="retorno-6" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-6" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>Promise&lt;void&gt;</code> - Promessa para aguardar o fechamento da porta.</p><h4 id="listen-signal-abortsignal-asynciterable-u" tabindex="-1"><code>listen(signal?: AbortSignal): AsyncIterable&lt;U&gt;</code> <a class="header-anchor" href="#listen-signal-abortsignal-asynciterable-u" aria-label="Permalink to &quot;`listen(signal?: AbortSignal): AsyncIterable&lt;U&gt;`&quot;">​</a></h4><p>Cria um iterável assíncrono para receber dados pela porta.</p><h4 id="exemplo-1" tabindex="-1">Exemplo <a class="header-anchor" href="#exemplo-1" aria-label="Permalink to &quot;Exemplo&quot;">​</a></h4><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createChannelPort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {});</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Porta fechada.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="parametros-7" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-7" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>signal</td><td><code>AbortSignal | undefined</code></td><td>Sinal de cancelamento.</td></tr></tbody></table><h4 id="retorno-7" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-7" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p><code>AsyncIterable&lt;U&gt;</code> - Iterável assíncrono para receber dados pela porta.</p><h4 id="close-void" tabindex="-1"><code>close(): void</code> <a class="header-anchor" href="#close-void" aria-label="Permalink to &quot;`close(): void`&quot;">​</a></h4><p>Fecha a porta.</p><h3 id="customreffactory-t" tabindex="-1"><code>CustomRefFactory&lt;T&gt;</code> <a class="header-anchor" href="#customreffactory-t" aria-label="Permalink to &quot;`CustomRefFactory&lt;T&gt;`&quot;">​</a></h3><p>Representa uma fábrica de referência reativa personalizada.</p><h4 id="parametros-8" tabindex="-1">Parâmetros <a class="header-anchor" href="#parametros-8" aria-label="Permalink to &quot;Parâmetros&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td>sender</td><td><code>ChannelPort&lt;T, T&gt;</code></td><td>Porta de envio.</td></tr><tr><td>receiver</td><td><code>ChannelPort&lt;T, T&gt;</code></td><td>Porta de recebimento.</td></tr></tbody></table><h4 id="retorno-8" tabindex="-1">Retorno <a class="header-anchor" href="#retorno-8" aria-label="Permalink to &quot;Retorno&quot;">​</a></h4><p>Um objeto com dois métodos:</p><table tabindex="0"><thead><tr><th>Nome</th><th>Tipo</th><th>Descrição</th></tr></thead><tbody><tr><td><code>get</code></td><td><code>() =&gt; T</code></td><td>Método para obter valor.</td></tr><tr><td><code>set</code></td><td><code>(value: T) =&gt; void</code></td><td>Método para definir valor.</td></tr></tbody></table>',80)]))}const E=t(r,[["render",o]]);export{c as __pageData,E as default};
